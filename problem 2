#include <bits/stdc++.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <chrono>
using namespace std::chrono;
using namespace std;


// Function that swaps two elements
void swap(int* e1, int* e2)
{
    int temp = *e1;
    *e1 = *e2;
    *e2 = temp;
}

// This function takes last element  places it at its correct position in sorted,
//array, and places all smaller elements to left of it and all greater elements to right of it
int partition (int arr[], int low, int high)
{
    int LastE = arr[high]; // last element
    int i = (low - 1); // Index of smaller element and indicates the right position of last element found so far

    for (int j = low; j <= high - 1; j++)
    {
        // j starts with the current element to see if it's smaller than the Last element
        if (arr[j] < LastE)
        {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

//low is the Starting index, high is the Ending index
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int partitioningI = partition(arr, low, high);
// Separately sort elements before partition and after partition
        quickSort(arr, low, partitioningI - 1);
        quickSort(arr, partitioningI + 1, high);
    }
}

void selectionSort(int array[], int size) {
  for (int st1 = 0; st1 < size - 1; st1++) {
    int min_idx = st1;
    for (int i = st1 + 1; i < size; i++) {
// Select the minimum element in each loop
      if (array[i] < array[min_idx])
        min_idx = i;
    }

// puts the minimum at the correct position
    swap(&array[min_idx], &array[st1]);
  }
}

void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

class Testsorting{
public:
    int sizee1=0;
    int *arr=new int[sizee1];

    void GenerateRandomList(int min,int max,int size)
    {
        for(int i=0;i<size;i++)
        {
            int num = (rand() %(max - min + 1));
            arr[i]=num;
            cout<<num<<" ";
        }
    }
double RunOnce(int sorter , int data[] , int size)
{
    //cout<<"Run once Function"<<endl;
    //int choicee=sorter;
if (sorter==1)
{
  auto start = high_resolution_clock::now(); // Get starting timepoint
  quickSort(data, 0, size - 1);
  cout<< endl<<"Sorted by quick sort : ";
  printArray(data,size);
  auto stop = high_resolution_clock::now();    // Get ending timepoint
  auto duration = duration_cast<microseconds>(stop - start);
  cout << "Time taken by function: "<< duration.count() << " microseconds" << endl;
    }

   else if (sorter==2)
{
    auto start = high_resolution_clock::now();
    selectionSort(data, size);
    cout<<endl<<"Sorted by selection sort : ";
    printArray(data,size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function: "<< duration.count() << " microseconds" << endl;
}

   }

void RunAndAverage(int sorter, int min, int max, int size,int sets_num)
    {
        double Total;
        if(sorter==1)
        {
            for(int i =0;i<sets_num;i++)
            {
                Total=0.0;
                double start=clock();
                cout<<"The Random list is : ";
                GenerateRandomList(min,max,size);
                RunOnce(1,arr,size);
                double finish=clock();
                Total=finish-start;
            }
        }
        else if(sorter==2)
        {
            Total=0.0;
            double start=clock();
             cout<<"The Random list is : ";
            GenerateRandomList(min,max,size);
            RunOnce(2,arr,size);
            double finish=clock();
            Total=finish-start;
        }
        double average=Total/sets_num;
        cout<<"The Average is :"<<average<<fixed<<" Second"<<endl;
    }
/*~Testsorting()
 {
  delete []arr;
 }*/
    };

int main()
{
  Testsorting Demo;
  int sz,minn,maxx,choice,choice2,choice3;
  cout<<"Enter size of the Random List: ";
  cin>>sz;
  cout<<"Enter Your minimum num : ";
  cin>>minn;
  cout<<"Enter Your maximum num: ";
  cin>>maxx;
  cout<<"Your Random List is : ";
    Demo.GenerateRandomList(minn,maxx,sz);
    cout<<endl;
  cout<<"Enter 1 for quick sort and 2 for selection sort"<<endl;
  cin>>choice;
   Demo.RunOnce(choice ,Demo.arr , sz);
  cout<<"Enter 1 for quick sort and 2 for selection sort to get average time"<<endl;
  cin>>choice2;
  cout<<"Enter The number of sets you want to compare"<<endl;
  cin>>choice3;
   Demo.RunAndAverage(choice2,minn,maxx,sz,choice3);
   ////////////////////////////
 /*  Testsorting Demo2;
Demo2.GenerateRandomList(1,100,15);
Demo2.RunOnce(1 ,Demo2.arr , 15);
Demo2.RunAndAverage(1,1,100,15,5);*/



    return 0;
}

